<?xml version="1.0" encoding="UTF-8"?>
<project name="GWT Ant Build" basedir="." default="war">

	<property name="gwt.module.name" value="de.oose.taskboard.OoseTaskboard" />
	<property name="jar.name" value="taskboard.jar" />
	<property name="war.name" value="taskboard.war" />
	<property name="src.dir" location="src" />
	<property name="server.resources.dir" location="../war/${server.resources.name}" />
	<property name="build.dir" location="war/WEB-INF/lib" />
	<property name="dist.dir" location="dist" />
	<property name="build.server.resources.dir" location="war/WEB-INF/classes/server_resources" />
	<property name="lib.dir" location="war/WEB-INF/lib" />
	<property name="gwt.client.dir" location="de/oose/taskboard/client" />
	<!-- some properties for the tomcat -->
	<!-- replace the tomcat download url with whatever you amy find appropriate -->
	<property name="tomcat.download.url" value="http://mirror.softaculous.com/apache/tomcat/tomcat-7/v7.0.26/bin/apache-tomcat-7.0.26.zip"/>
	<property name="tomcat.install.dir" value="tomcat"/>
	<!-- the tomcat zip contains a toplevel directory, where everything is installed - so this must be adapted to each new tomcat version -->
	<property name="tomcat.subdir" value="apache-tomcat-7.0.26"/>
	<property name="tomcat.home" value="${tomcat.install.dir}/${tomcat.subdir}" />
	<property name="tomcat.file" value="apache-tomcat-7.0.26.zip"/>

	<!-- grab the test properties shared by this build and the ivy build --> 
	<property file="build/test.properties" />

	<import file="gwt.compile.ant.xml" />

	<path id="project.classpath">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="clean" depends="tomcat-stop">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${tomcat.install.dir}"/>
	</target>

	<!-- Compile the java source code using javac -->
	<target name="compile" depends="prepare">
		<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false">
			<classpath refid="project.classpath" />
		</javac>
	</target>
	<!-- Invoke the GWT compiler to create the Javascript for us -->
	<target name="gwt-compile" depends="compile">
		<!-- See gwt.compile.ant.xml for gwt.compile task defination -->
		<gwt.compile module="${gwt.module.name}" />
	</target>
	<!-- Package the compiled Java source into a JAR file -->
	<target name="jar" depends="compile">
		<jar jarfile="${lib.dir}/${jar.name}" basedir="${build.dir}/">
			<!-- Don't wrap any of the client only code into the JAR -->
			<exclude name="${gwt.client.dir}/**/*.class" />
		</jar>
	</target>
	<!-- Copy the static server resources into the required
    directory ready for packaging -->
	<target name="copy-resources">
		<!-- <copy todir="${build.server.resources.dir}" preservelastmodified="true">
            <fileset dir="${server.resources.dir}"/>           
        </copy> -->
	</target>
	<!-- Package the JAR file, Javascript, static resources
    and external libraries into a WAR file -->
	<target name="war" depends="gwt-compile, copy-resources">

		<war basedir="war" destfile="${dist.dir}/${war.name}" webxml="war/WEB-INF/web.xml">
			<exclude name="WEB-INF/**" />
			<exclude name="${server.resources.name}/**" />
			<include name="*.css"/>
			<include name="*.html"/>
			<include name="oosetaskboard/**"/>
			<webinf dir="war/WEB-INF/">
				<include name="**/*.class"/>
				<include name="classes/${server.resources.name}/**" />
				<include name="**/*.xml" />
				<include name="**/*.jar" />
				<exclude name="**/gwt-dev.jar" />
				<exclude name="**/gwt-user.jar" />
			</webinf>
		</war>
	</target>
		
	<target name="tomcat-check-installed" description="Checks if the tomcat needs to be installed">
		 <available file="{tomcat.home}" type="dir" property="tomcat.installed"/>
	</target>	
	
	<target name="tomcat-install" depends="tomcat-check-installed" unless="tomcat.installed"
		description="Download and install tomcat server">
		<mkdir dir="${tomcat.install.dir}"/>
		<echo>Installing Tomcat</echo>
		<unzip dest="${tomcat.install.dir}" src="${tomcat.file}" overwrite="true"/>
		<property name="tomcat.installed" value="true"/>
	</target>
	
	<path id="tomcat.class.path">
		<fileset dir="${tomcat.home}/lib">
			<include name="**/*.jar"/>
			<include name="**/*.zip"/>
		</fileset>
		<pathelement location="${tomcat.home}/bin/bootstrap.jar"/>
		<pathelement location="${tomcat.home}/bin/tomcat-juli.jar"/>
	</path>

	<target name="deploy" depends="war,tomcat-install"
		description="Builds the webapp and deploys it in the local tomcat">
		<sequential>
			<antcall target="tomcat-stop"/>
			<delete dir="${tomcat.home}/webapps/${dist.context}" failonerror="false"/>
			<copy file="${dist.dir}/${war.name}" todir="${tomcat.home}/webapps"/>
			<antcall target="tomcat-start"/>
		</sequential>
	</target>

	<target name="tomcat-start" depends="tomcat-install"
		description="Starts the local tomcat, if neccesary the task installs it and deploys the webapp">
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true"
			classpathref="tomcat.class.path">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
		</java>
	</target>

	<target name="tomcat-stop" depends="tomcat-check-status" if="tomcat.started"
		description="Checks if the tomcat is running and if it is it get's stopped">
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true"
			classpathref="tomcat.class.path">
			<jvmarg value="-Dcatalina.home=${tomcat.home}"/>
			<arg line="stop"/>
		</java>
		<sleep seconds="5"/>
	</target>

	<target name="tomcat-check-status">
		<condition property="tomcat.started">
			<socket server="localhost" port="8080"/>
		</condition>
	</target>
	
	<!-- the targets below this point deal with all the test stuff -->
	
	<target name="test-execute" depends ="test-compile">
		<java classname="${test.main.class}">
			<classpath>
				<pathelement path="${test.compile.dir}"/>
				<path refid="project.test.classpath"/>
			</classpath>
		</java>
	</target>
	
	<!-- Compile the java source code using javac -->
	<target name="test-compile" depends="test-prepare">
		<echo>Compiling the test classes in ${test.src.dir} to ${test.compile.dir}</echo>
		<javac srcdir="${test.src.dir}" destdir="${test.compile.dir}" includeantruntime="false" sourcepath="">
			<classpath refid="project.test.classpath" />
		</javac>
		<!-- copy the logback configuration -->
		<copy file="${test.src.dir}/logback.xml" todir="${test.compile.dir}"/>
	</target>

	<!-- clean up after yourself - if needed -->
	<target name="test-clean" depends="test-prepare">
		<delete dir="${test.compile.dir}" />
		<delete file="${test.build.dir}/${test.target.jar}"/>
	</target>
	
	<target name="test-prepare">
		<!-- in theory this should exist - but we wnat to get sure -->
		<mkdir dir="${test.dir}"/>
		<!-- create the test compile -->
		<mkdir dir="${test.compile.dir}"/>
	</target>

	<path id="project.test.classpath">
		<fileset dir="${test.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

</project>
